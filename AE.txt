1.环境
	类库
		Carto;
			IFeatureLayer
			IGraphicsContainer
			IMap
			IFeatureSelection
			IActiveView
			IFeatureLayerDefinition
			IIdentify
			IElement
			ILineElement
			IMarkerElement
			ITextElement
			IRasterLayer : ILayer
		Catalog;
		CatalogUI;
		Controls;
		Display;
			ISimpleFillSymbol
			ISimpleMarkerSymbol
			IScreenDisplay
			IRgbColor
		DataSourcesFile;
		esriSystem;
			IArray
		Geodatabase;
			IQueryFilter
			IFeatureCursor
			IFeature
			ISelectionSet
			ICursor
		Geometry;
			IGeometry
			IPolyline
			IPoint
		GeocodingTools;
2.控件
	制图控件
		MapControl
			实线的主要接口：
				IMapControlDefault
				IMapControl2
					设置控件外观、显示属性、Map 对象，添加/管理图层、地图文档，绘制图形，返回几何体
				IMapControl3
					继承自 IMapControl2
					新增属性：
						CustomProperty
						DocumentFilename
						DocumentMap
						KyeIntercept
						Object
						ShowMapTips
						TipDelay
						TipStyle
						SuppressResizeDrawing()
				IMapControlEvent2
					定义了 MapControl 全部事件
		PageLayoutControl
			布局与制图
			PageLayout: 控制元素属性和方法
			通过 mxd 加载数据
			实现接口：IPageLayoutControlDefault、IPageLayoutControl、IPageLayoutControl2、IPageLayoutControlEvents
				IPageLayoutControlDefault 界面调用默认接口
	三维控件
		GlobalControl
		SceneControl
	框架控件
		TOCControl
			图层树控件：管理图层可见和标签的编辑
			接口:
				ITOCControl：控件外观、设置关联控件
				ITOCControlEvents：定义了 TOCControl
		ToolbarControl
			6个对象及接口：
				ToolbarControl
				ToolbarItem
				ToolbarMenu
				ToolbarPool
				CustomizeDialog
				MissingCommand
3.几何对象和空间坐标
	1.Geometry
		interface ISpatialReference : ISpatialReferenceInfo
		分为两个层次：
			1.构成要素形状的几何图形：点、线、面
			2.组成几何图形的构件
	2.Envelope：包络线
		接口：IEnvelope
			属性：XMax，XMin，YMax，YMin，Height，Width
			方法：Intersect、Union、Expand、offset、CenterAt、 PutCoords
	3.Curve
		属性：length、FromPoint、ToPoint、isClose
		方法：ReverseOrientation
		1.segment
			接口：ISegment
				属性：
				方法：SplitAtDistance、SplitDivideLength
			1.CircularArc
				接口：ICircularArc
					属性：FromAngle、ToAngle、CentralAngle、CenterPoint、ChordHeight、Isline、IsPoint、IsMinor、IsCounterClockwise
					方法：Complement
			2.Line
				接口：ILine
					属性：Angle
					方法：QueryCoords、PutCoords
		2.Path
	4.点对象
	5.线对象
	6.面对象
	7.空间坐标系及变换
		获取/设置
			IGeoDataset geoDataset = featureClass as IGeoDataset;
            IGeoDatasetSchemaEdit geoDatasetEdit = geoDataset as IGeoDatasetSchemaEdit;
            if (geoDatasetEdit.CanAlterSpatialReference == true)
            {
                ISpatialReferenceFactory2 spatRefFact = new SpatialReferenceEnvironmentClass();
                // 4214 beijing1954，4547 2000
                IGeographicCoordinateSystem geoSys = spatRefFact.CreateGeographicCoordinateSystem(4214);
                // 设置坐标系
                geoDatasetEdit.AlterSpatialReference(geoSys);
            }
            // 获取，名称 => spatialReference.Name
			ISpatialReference spatialReference = geoDataset.SpatialReference;
4.地图组成及图层控制
	1.地图对象 Map
		35个接口：
			1.IMap
				ActiveGraphicsLayer
				AddLayer
				AddLayers
				AddMapSurround
				AnnotationEngine
				BasicGraphicsLayer
				ClearSelection
				SelectByShape
			2.IGraphicsContainer: 用来管理图形元素（增、删、改、选择）
				Reset() // zorder => 0
				IElement Next()
				AddElement(IElement，int zorder)
				UpdateElement(IElement)
				DeleteElement(IElement)
			3.IActiveView
				实现对象：Map（数据视图）、PageLayout（布局视图）
				Extent：返回/设置 Map Envelope
				FullExtent：返回视图范围
				ScreenDisplay：控制图形绘制工作
				PartialRefresh(esriViewDrawPhase,object,Envelope)
					参数1：刷新对象的类型；参数2：刷新的对象
					// 刷新所有图层
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGeography, null, null);
					// 刷新指定图层
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGeography, pLayer, null);
					// 刷新选择的对象
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGeoSelection, null, null);
					// 刷新图形元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGraphics, null, null);
					// 刷新指定图形元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGraphics, pElement, null);
					// 刷新选择的图形元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGraphicSelection, null, null);
					// 不刷新元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewNone, null, null);
			4.IActiveViewEvents
				事件：AfterDraw、SelectionChanged
			5.IMapBookmarks
				管理空间书签对象
			6.ITableCollection
				用于添加关系型属性数据
	2.图层对象 Layer
		1.ILayer
			e.g: ILayer layer = axMapControl1.Map.get_Layer(0);
			Cached：是否显示缓存
			Draw()：绘制图层
			MaximumScale：最大比例尺
			MinimumScale：最小比例尺
			Name：设置/获取图层名称
			ShowTips：鼠标悬浮要素是否显示 Tip
			TipText：用于确定图层提示显示的区域？
			SpatialReference：用于设置图层的空间参考
				FactoryCode：WKID
				Name：坐标系名称
			Valid：图层是否有效
			Visible：图层是否可见
		2.要素图层
			1.IFeatureLayer：用于管理要素图层的数据源=>要素类（FeatureClass）
				DataSourceType:
				Search(IQueryFilter, IfRecycling):IFeatureCursor
					1.IQueryFilter => QueryFilterClass
					2.游标 IFeatureCursor
						NextFeature() 返回 IFeature
							IFeature 可以获取要素相关的信息：获取某个属性 feature.get_Value(index)
			2.IGeoFeatureLayer
				控制标注之类的地理相关内容
			3.IGeoDataset
				用于管理地理要素集
				实现类：CadFeature、FeatureLayer、GdbRasterCatalogLayer
					e.g：
						IFeatureLayer featureLayer=axMapControl1.Map.get_Layer(0) as IFeatureLayer;
						IGeoDataset geoDataset = featureLayer.FeatureClass as IGeoDataset;
						// 获取坐标系，名称
						geoDataset.SpatialReference.Name
			4.IFeatureSelection
				实现类：CadFeature、FeatureLayer、GdbRasterCatalogLayer、CoverageAnnotationLayer
				方法
					Add(IFeature Feature)：
					SelectFeatures(IQueryFilter, esriSelectionResultEnum Method, bool justOne)
					Clear：清空选择集
				实例属性/方法
					ISelectionSet selectionSet = featureSelection.SelectionSet;
						// 没有返回值，游标以参数的形式传递
						Search(IQueryFilter QueryFilter, bool Recycling, out ICursor Cursor)
			5.IFeatureLayerDefinition
				LayerName：新图层名称
				DefinitionExpression: 筛选要素的条件
				CreateSelectionLayer()
			6.ILayerFields
				要素属性相关信息
				Field
				int FindField(string Name)：查询字段的 index
				int FindFieldByAliasName(string Name)：查询字段
				IField get_Field(int)：用于获取字段信息：名称、长度、可编辑，（获取要素的属性表 => 4.2.2.1 IFeatureLayer 和 IFeature）
				FieldCount：字段数目
			7.IIdentify
				IArray Identify(IGeometry pGeom): 用于获取图层单个要素
					e.g:
						IIdentify identify = axMapControl1.Map.get_Layer(0) as IIdentify;
						IArray identify.Identify(null); // param {IGeometry} 可以 null
						// 获取第 0 个元素
						IIdentifyObj idObj = array.get_Element(0) as IIdentifyObj;
					IArray 元素数组
						Count
						Add(object unk)
						object get_Element(int index)
						Insert(int index, object unk)
						Remove(int index)
						RemoveAll()
		3.CAD 文件
		4.TIN 图层
		5.GraphicsLayer
	3.屏幕显示对象 ScreanDisplay
		IActiveView
			ScreenDisplay
			e.g
				IPolyline polyline = axMapControl1.TrackLine() as IPolyline;
	            screenDisplay.StartDrawing(screenDisplay.hDC,(short)esriScreenCache.esriNoScreenCache);
	            screenDisplay.SetSymbol(lineSymbol as ISymbol);
	            screenDisplay.DrawPolyline(polyline);
	            screenDisplay.FinishDrawing();
	4.页面布局对象 PageLayout
	5.地图排版
	6.Element
		IElement 所有图形元素和框架都实现的接口
			属性：Geometry 
			e.g
				(LineElement as IElement).Geometry=point;
		仅保存在内存的元素，显示地图发生变化就会消失
		1.图形元素(Graphic Element)
			1.LineElement 和 MarkerElement
				e.g
					IMarkerElement markerElement = new MarkerElementClass();
	                (markerElement as IElement).Geometry = point;
	                markerElement.Symbol = markerSymbol;
			2.TextElement
				e.g
					ITextElement textElement = new TextElementClass();
	                textElement.Text = "textElement";
	                (textElement as IElement).Geometry = point;
			3.GroupElement
				AddElement
				ClearElements
				e.g
					IGroupElement groupElement = new GroupElementClass();
			4.FillShapeElement
				IFillShapeElement
					Symbol:必须是 IFillsymbol
			5.图片元素对象
		2.框架元素(Frame Element)
			1.MapFrame 对象
				供 PageLayout 使用，实现了 IMapFrame，提供了属性和方法对 Map 对象进行控制
				(axPageLayoutControl1.PageLayout as IMapFrame).
					IMap Map { get; set; }
					IEnvelope MapBounds { get; set; }
					double MapScale { get; set; }
					IMapSurroundFrame CreateSurroundFrame(UID clsid, IMapSurround optionalStyle);
			2.MapSurroundFrame 对象
				用来管理 MapFrame 对象
	7.MapGrid
		1.MapGrid
		2.MapGridBorder
	8.MapSurround
		修饰地图的辅助图形元素对象
		1.图例 Legend
		2.指北针 MarkerNorthArrow
		3.比例尺 ScaleBar
		4.比例文本 ScaleText
	9.Style 对象
	10.添加、删除图层数据
		矢量数据：ArcInfo Coverage、ESRI Shapefile，CAD：DWF、DWG，栅格数据：BMP、CRID
		1.矢量数据添加
			用到的对象：Map、Dataset、FeatureLayer、FeatureClass
			用到的接口：IMap、IActiveView、IDataset、IFeatureLayer、IFeatureClass
			Map 对象
				ActiveGraphicsLayer:用于获取 Map 中处于激活状态的图层
				Layer：用于获取 索引 指定的图层
				LayerCount：图层数量
				AddLayer：添加图层
				ClearSelection：清除所有选中的对象的选中状态
			Dataset(IDataset) 抽象类，Workspace 中数据的集合，Workspace 可包含多个 Dataset，Dataset 可包含其他 Dataset
				派生类：GeoDataset、Table、FeatureDataset、RasterDataset
				{
					IDataset 的实现：Dataset、Workspace、FeatureLayer
						Name:数据集的名称
						Category：数据集的类型
						Workspace：数据集所在的工作空间
						CanCopy：用于检测数据集是否可复制
						CanDelete：用于检测数据集是否可删除
						CanRename：用于检测数据集是否可重命名
				}
			FeatureLayer 实现了 ILayer、IFeatureLayer
			IFeatureLayer 继承自 ILayer
				新属性/方法：
					DataSourceType：获取/设置数据源的类型
					FeatureClass：用于获取图层的要素类
					ScaleSymbol：获取/设置要素层的符合是否随比例尺变化而变化
					Search：根据查询过滤器要要素层中搜索符合条件的要素
			FeatureClass 要素类是 Feature 的集合,
					Feature.shape：专门用来存放几何图形
				CreateFeature：创建新的实体(Feature)
				DeleteField：删除要素类的字段
		2.栅格数据的添加
			IRasterLayer 继承自 ILayer
				void CreateFromRaster(IRaster Raster): 从内存中已有的 Raster 创建一个图层
		        void CreateFromDataset(IRasterDataset RasterDataset)：从硬盘中的某个数据集创建一个图层
		        Raster：获取 IRasterLayer 中的 Raster 对象
		        int DisplayResolutionFactor { get; set; }：设置栅格数据的分辨率
		3.删除图层数据
			将图层对象从内存中删除
			IMap
				void DeleteLayer(ILayer Layer):删除图层
				void ClearLayers():删除全部图层
	11.图层控制
		修改图层的叠加顺序，由外到内（0~index）
		public virtual void MoveLayerTo(int fromIndex, int toIndex)
		e.g
			axMapControl1.MoveLayerTo(axMapControl1.LayerCount - 1, 0)
		Visible：图层是否可见
5.地图制图
	1.地图标注
		1.标注（Label）		
		2.注记（Annotation）
	2.符号及符号库
		1.颜色对象
			RGB 模型：Red、Green、Blue
			HSV 模型：Hue、Saturation、Value
			Grey 模型
			CMYK 模型
			1.Color 对象
				IColor => Color 抽象类，泛化为5个类：CmykColor、GreyColor、HlsColor、HsvColor、RgbColor
			2.ColorRamp 对象
				IColorRamp
		2.Symbol 对象
			离散实体3种：点、线、面
			表示符号：MarkSymbol、LineSymbol、FillSymbol
			文字标注：TextSymbol
			实现自 ISymbol、IMapLevel
				MapLevel：用于确定图层的叠加顺序
			1.MarkerSymbol 对象
				用于修饰点对象的符号，12个子类：ArrowMarkerSymbol、BarChartSymbol、CharacterMarker3DSymbol、CharacterMarkerSymbol、Marker3DSymbol、MultiLayerMarkerSymbol、PictureMarkerSymbol、PieChartSymbol、SimpleMarker3DSymbol、SimpleMarkerSymbol、StackChartSymbol、TextMarkerSymbol
				全部 MarkerSymbol 实现自：IMarkerSymbol
					Angle、Color、Size‘、Xoffset、Yoffset
				1.SimpleMarkerSymbol：简单类型的点状符号
				2.ArrowMarkerSymbol：箭头形式的符号
				3.CharacterMarkerSymbol：字符形式的符号
				4.PictureMarkerSymbol：图片为背景的符号
				5.MultiLayerMarkerSymbol：多个符号叠加生成新的符号
			2.LineSymbol 对象
				ILineSymbol
					Color
					Width
				ISimpleLineSymbol:ILineSymbol
					SimpleLineSymbol
						Style:用于设置线的样式
			3.FillSymbol 对象
				修饰具有面积的几何形体的符号对象
				IFillSymbol
					Color：填充符号的基本类型
					OutLine：外边框
				1.SimpleFillSymbol：简单填充符号
				2.LineFillSymbol：线填充符号
				3.MarkerFillSymbol：点填充符号
				4.GradientFillSymbol：渐变颜色
				5.PictureFillSymbol：图片填充符号
				6.MultilayerFillSymbol：多层填充符号
				7.DotDensityFillSymbol：点密度填充符号
			4.TextSymbol 对象
			5.3DChartSymbol 对象
				子类：BarChart、PieChart、StackedChart
	3.专题图制作
6.空间数据管理
	空间数据库及组织
		1.混合型空间数据库
			非空间数据存储在关系型数据库中，空间数据存放在系统文件中
		2.集成型空间数据库
			所有的数据都存储于一个数据库中
			1.全关系型 RDB
			2.面向对象 OODB
			3.对象-关系模型数据库 ORDB