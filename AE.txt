1.环境
	类库
		Carto;
			IFeatureLayer
			IGraphicsContainer
			IMap
			IFeatureSelection
			IActiveView
			IFeatureLayerDefinition
			IIdentify
			IElement
			ILineElement
			IMarkerElement
			ITextElement
			IRasterLayer : ILayer
				RasterLayerClass
		Catalog;
		CatalogUI;
		Controls;
			IMapControlEvents2_OnAfterDrawEvent
		Display;
			ISimpleFillSymbol
			ISimpleMarkerSymbol
			IScreenDisplay
			IRgbColor
		DataSourcesFile;
		(System)esriSystem;
			IArray
			IAoInitialize
		Geodatabase;
			IQueryFilter
			IFeatureCursor
			IFeature
			ISelectionSet
			ICursor
			IWorkspaceEdit
			IWorkspaceFactory
		Geometry;
			IGeometry
			IPolyline
			IPoint
		GeocodingTools;
		DataSourcesGDB
			SdeWorkspaceFactory
		DataSourcesRaster
			RasterWorkspaceFactoryClass
		(Version)
			RuntimeManager
			ProductCode
2.控件
	制图控件
		MapControl
			实线的主要接口：
				IMapControlDefault
				IMapControl2
					设置控件外观、显示属性、Map 对象，添加/管理图层、地图文档，绘制图形，返回几何体
				IMapControl3
					继承自 IMapControl2
					新增属性：
						CustomProperty
						DocumentFilename
						DocumentMap
						KyeIntercept
						Object
						ShowMapTips
						TipDelay
						TipStyle
						SuppressResizeDrawing()
				IMapControlEvent2
					定义了 MapControl 全部事件
		PageLayoutControl
			布局与制图
			PageLayout: 控制元素属性和方法
			通过 mxd 加载数据
			实现接口：IPageLayoutControlDefault、IPageLayoutControl、IPageLayoutControl2、IPageLayoutControlEvents
				IPageLayoutControlDefault 界面调用默认接口
	三维控件
		GlobalControl
		SceneControl
	框架控件
		TOCControl
			图层树控件：管理图层可见和标签的编辑
			接口:
				ITOCControl：控件外观、设置关联控件
				ITOCControlEvents：定义了 TOCControl
		ToolbarControl
			6个对象及接口：
				ToolbarControl
				ToolbarItem
				ToolbarMenu
				ToolbarPool
				CustomizeDialog
				MissingCommand
3.几何对象和空间坐标
	1.Geometry
		interface ISpatialReference : ISpatialReferenceInfo
		分为两个层次：
			1.构成要素形状的几何图形：点、线、面
			2.组成几何图形的构件
	2.Envelope：包络线
		接口：IEnvelope
			属性：XMax，XMin，YMax，YMin，Height，Width
			方法：Intersect、Union、Expand、offset、CenterAt、 PutCoords
	3.Curve
		属性：length、FromPoint、ToPoint、isClose
		方法：ReverseOrientation
		1.segment
			接口：ISegment
				属性：
				方法：SplitAtDistance、SplitDivideLength
			1.CircularArc
				接口：ICircularArc
					属性：FromAngle、ToAngle、CentralAngle、CenterPoint、ChordHeight、Isline、IsPoint、IsMinor、IsCounterClockwise
					方法：Complement
			2.Line
				接口：ILine
					属性：Angle
					方法：QueryCoords、PutCoords
		2.Path
	4.点对象
	5.线对象
	6.面对象
	7.空间坐标系及变换
		获取/设置
			IGeoDataset geoDataset = featureClass as IGeoDataset;
            IGeoDatasetSchemaEdit geoDatasetEdit = geoDataset as IGeoDatasetSchemaEdit;
            if (geoDatasetEdit.CanAlterSpatialReference == true)
            {
                ISpatialReferenceFactory2 spatRefFact = new SpatialReferenceEnvironmentClass();
                // 4214 beijing1954，4547 2000
                IGeographicCoordinateSystem geoSys = spatRefFact.CreateGeographicCoordinateSystem(4214);
                // 设置坐标系
                geoDatasetEdit.AlterSpatialReference(geoSys);
            }
            // 获取，名称 => spatialReference.Name
			ISpatialReference spatialReference = geoDataset.SpatialReference;
4.地图组成及图层控制
	1.地图对象 Map
		35个接口：
			1.IMap
				ActiveGraphicsLayer
				AddLayer
				AddLayers
				AddMapSurround
				AnnotationEngine
				BasicGraphicsLayer
				ClearSelection
				SelectByShape
			2.IGraphicsContainer: 用来管理图形元素（增、删、改、选择）
				Reset() // zorder => 0
				IElement Next()
				AddElement(IElement，int zorder)
				UpdateElement(IElement)
				DeleteElement(IElement)
			3.IActiveView
				实现对象：Map（数据视图）、PageLayout（布局视图）
				Extent：返回/设置 Map Envelope
				FullExtent：返回视图范围
				ScreenDisplay：控制图形绘制工作
				PartialRefresh(esriViewDrawPhase,object,Envelope)
					参数1：刷新对象的类型；参数2：刷新的对象
					// 刷新所有图层
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGeography, null, null);
					// 刷新指定图层
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGeography, pLayer, null);
					// 刷新选择的对象
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGeoSelection, null, null);
					// 刷新图形元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGraphics, null, null);
					// 刷新指定图形元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGraphics, pElement, null);
					// 刷新选择的图形元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewGraphicSelection, null, null);
					// 不刷新元素
					ActiveView.PartialRefresh(esriViewDrawPhase.esriViewNone, null, null);
			4.IActiveViewEvents
				事件：AfterDraw、SelectionChanged
			5.IMapBookmarks
				管理空间书签对象
			6.ITableCollection
				用于添加关系型属性数据
	2.图层对象 Layer
		1.ILayer
			e.g: ILayer layer = axMapControl1.Map.get_Layer(0);
			Cached：是否显示缓存
			Draw()：绘制图层
			MaximumScale：最大比例尺
			MinimumScale：最小比例尺
			Name：设置/获取图层名称
			ShowTips：鼠标悬浮要素是否显示 Tip
			TipText：用于确定图层提示显示的区域？
			SpatialReference：用于设置图层的空间参考
				FactoryCode：WKID
				Name：坐标系名称
			Valid：图层是否有效
			Visible：图层是否可见
		2.要素图层
			1.IFeatureLayer：用于管理要素图层的数据源=>要素类（FeatureClass）
				DataSourceType:
				Search(IQueryFilter, IfRecycling):IFeatureCursor
					1.IQueryFilter => QueryFilterClass
					2.游标 IFeatureCursor
						NextFeature() 返回 IFeature
							IFeature 可以获取要素相关的信息：获取某个属性 feature.get_Value(index)
			2.IGeoFeatureLayer
				控制标注之类的地理相关内容
			3.IGeoDataset
				用于管理地理要素集
				实现类：CadFeature、FeatureLayer、GdbRasterCatalogLayer
					e.g：
						IFeatureLayer featureLayer=axMapControl1.Map.get_Layer(0) as IFeatureLayer;
						IGeoDataset geoDataset = featureLayer.FeatureClass as IGeoDataset;
						// 获取坐标系，名称
						geoDataset.SpatialReference.Name
			4.IFeatureSelection
				实现类：CadFeature、FeatureLayer、GdbRasterCatalogLayer、CoverageAnnotationLayer
				方法
					Add(IFeature Feature)：
					SelectFeatures(IQueryFilter, esriSelectionResultEnum Method, bool justOne)
					Clear：清空选择集
				实例属性/方法
					ISelectionSet selectionSet = featureSelection.SelectionSet;
						// 没有返回值，游标以参数的形式传递
						Search(IQueryFilter QueryFilter, bool Recycling, out ICursor Cursor)
			5.IFeatureLayerDefinition
				LayerName：新图层名称
				DefinitionExpression: 筛选要素的条件
				CreateSelectionLayer()
			6.ILayerFields
				要素属性相关信息
				Field
				int FindField(string Name)：查询字段的 index
				int FindFieldByAliasName(string Name)：查询字段
				IField get_Field(int)：用于获取字段信息：名称、长度、可编辑，（获取要素的属性表 => 4.2.2.1 IFeatureLayer 和 IFeature）
				FieldCount：字段数目
			7.IIdentify
				IArray Identify(IGeometry pGeom): 用于获取图层单个要素
					e.g:
						IIdentify identify = axMapControl1.Map.get_Layer(0) as IIdentify;
						IArray identify.Identify(null); // param {IGeometry} 可以 null
						// 获取第 0 个元素
						IIdentifyObj idObj = array.get_Element(0) as IIdentifyObj;
					IArray 元素数组
						Count
						Add(object unk)
						object get_Element(int index)
						Insert(int index, object unk)
						Remove(int index)
						RemoveAll()
		3.CAD 文件
		4.TIN 图层
		5.GraphicsLayer
	3.屏幕显示对象 ScreanDisplay
		IActiveView
			ScreenDisplay
			e.g
				IPolyline polyline = axMapControl1.TrackLine() as IPolyline;
	            screenDisplay.StartDrawing(screenDisplay.hDC,(short)esriScreenCache.esriNoScreenCache);
	            screenDisplay.SetSymbol(lineSymbol as ISymbol);
	            screenDisplay.DrawPolyline(polyline);
	            screenDisplay.FinishDrawing();
	4.页面布局对象 PageLayout
	5.地图排版
	6.Element
		IElement 所有图形元素和框架都实现的接口
			属性：Geometry 
			e.g
				(LineElement as IElement).Geometry=point;
		仅保存在内存的元素，显示地图发生变化就会消失
		1.图形元素(Graphic Element)
			1.LineElement 和 MarkerElement
				e.g
					IMarkerElement markerElement = new MarkerElementClass();
	                (markerElement as IElement).Geometry = point;
	                markerElement.Symbol = markerSymbol;
			2.TextElement
				e.g
					ITextElement textElement = new TextElementClass();
	                textElement.Text = "textElement";
	                (textElement as IElement).Geometry = point;
			3.GroupElement
				AddElement
				ClearElements
				e.g
					IGroupElement groupElement = new GroupElementClass();
			4.FillShapeElement
				IFillShapeElement
					Symbol:必须是 IFillsymbol
			5.图片元素对象
		2.框架元素(Frame Element)
			1.MapFrame 对象
				供 PageLayout 使用，实现了 IMapFrame，提供了属性和方法对 Map 对象进行控制
				(axPageLayoutControl1.PageLayout as IMapFrame).
					IMap Map { get; set; }
					IEnvelope MapBounds { get; set; }
					double MapScale { get; set; }
					IMapSurroundFrame CreateSurroundFrame(UID clsid, IMapSurround optionalStyle);
			2.MapSurroundFrame 对象
				用来管理 MapFrame 对象
	7.MapGrid
		1.MapGrid
		2.MapGridBorder
	8.MapSurround
		修饰地图的辅助图形元素对象
		1.图例 Legend
		2.指北针 MarkerNorthArrow
		3.比例尺 ScaleBar
		4.比例文本 ScaleText
	9.Style 对象
	10.添加、删除图层数据
		矢量数据：ArcInfo Coverage、ESRI Shapefile，CAD：DWF、DWG
		栅格数据：BMP、CRID、TIFF、JPEG、ERDAS IMAGE
		1.矢量数据添加
			用到的对象：Map、Dataset、FeatureLayer、FeatureClass
			用到的接口：IMap、IActiveView、IDataset、IFeatureLayer、IFeatureClass
			Map 对象
				ActiveGraphicsLayer:用于获取 Map 中处于激活状态的图层
				Layer：用于获取 索引 指定的图层
				LayerCount：图层数量
				AddLayer：添加图层
				ClearSelection：清除所有选中的对象的选中状态
			Dataset(IDataset) 抽象类，Workspace 中数据的集合，Workspace 可包含多个 Dataset，Dataset 可包含其他 Dataset
				派生类：GeoDataset、Table、FeatureDataset、RasterDataset
				{
					IDataset 的实现：Dataset、Workspace、FeatureLayer
						Name:数据集的名称
						Category：数据集的类型
						Workspace：数据集所在的工作空间
						CanCopy：用于检测数据集是否可复制
						CanDelete：用于检测数据集是否可删除
						CanRename：用于检测数据集是否可重命名
				}
			FeatureLayer 实现了 ILayer、IFeatureLayer
			IFeatureLayer 继承自 ILayer
				新属性/方法：
					DataSourceType：获取/设置数据源的类型
					FeatureClass：用于获取图层的要素类
					ScaleSymbol：获取/设置要素层的符合是否随比例尺变化而变化
					Search：根据查询过滤器要要素层中搜索符合条件的要素
			FeatureClass 要素类是 Feature 的集合,
					Feature.shape：专门用来存放几何图形
				CreateFeature：创建新的实体(Feature)
				DeleteField：删除要素类的字段
		2.栅格数据的添加
			IRasterLayer 继承自 ILayer
				void CreateFromRaster(IRaster Raster): 从内存中已有的 Raster 创建一个图层
		        void CreateFromDataset(IRasterDataset RasterDataset)：从硬盘中的某个数据集创建一个图层
		        Raster：获取 IRasterLayer 中的 Raster 对象
		        int DisplayResolutionFactor { get; set; }：设置栅格数据的分辨率
		3.删除图层数据
			将图层对象从内存中删除
			IMap
				void DeleteLayer(ILayer Layer):删除图层
				void ClearLayers():删除全部图层
	11.图层控制
		修改图层的叠加顺序，由外到内（0~index）
		public virtual void MoveLayerTo(int fromIndex, int toIndex)
		e.g
			axMapControl1.MoveLayerTo(axMapControl1.LayerCount - 1, 0)
		Visible：图层是否可见
5.地图制图
	1.地图标注
		1.标注（Label）		
		2.注记（Annotation）
	2.符号及符号库
		1.颜色对象
			RGB 模型：Red、Green、Blue
			HSV 模型：Hue、Saturation、Value
			Grey 模型
			CMYK 模型
			1.Color 对象
				IColor => Color 抽象类，泛化为5个类：CmykColor、GreyColor、HlsColor、HsvColor、RgbColor
			2.ColorRamp 对象
				IColorRamp
		2.Symbol 对象
			离散实体3种：点、线、面
			表示符号：MarkSymbol、LineSymbol、FillSymbol
			文字标注：TextSymbol
			实现自 ISymbol、IMapLevel
				MapLevel：用于确定图层的叠加顺序
			1.MarkerSymbol 对象
				用于修饰点对象的符号，12个子类：ArrowMarkerSymbol、BarChartSymbol、CharacterMarker3DSymbol、CharacterMarkerSymbol、Marker3DSymbol、MultiLayerMarkerSymbol、PictureMarkerSymbol、PieChartSymbol、SimpleMarker3DSymbol、SimpleMarkerSymbol、StackChartSymbol、TextMarkerSymbol
				全部 MarkerSymbol 实现自：IMarkerSymbol
					Angle、Color、Size‘、Xoffset、Yoffset
				1.SimpleMarkerSymbol：简单类型的点状符号
				2.ArrowMarkerSymbol：箭头形式的符号
				3.CharacterMarkerSymbol：字符形式的符号
				4.PictureMarkerSymbol：图片为背景的符号
				5.MultiLayerMarkerSymbol：多个符号叠加生成新的符号
			2.LineSymbol 对象
				ILineSymbol
					Color
					Width
				ISimpleLineSymbol:ILineSymbol
					SimpleLineSymbol
						Style:用于设置线的样式
							enum esriSimpleLineStyle:
						        esriSLSSolid = 0,
						        esriSLSDash = 1,
						        esriSLSDot = 2,
						        esriSLSDashDot = 3,
						        esriSLSDashDotDot = 4,
						        esriSLSNull = 5,
						        esriSLSInsideFrame = 6,
			        e.g
			        	ISimpleLineSymbol simpleLineSymbol = new SimpleLineSymbolClass();
			            simpleLineSymbol.Color = GetRGB(255, 0, 0);
			            simpleLineSymbol.Width = 2;
			            simpleLineSymbol.Style = esriSimpleLineStyle.esriSLSDashDotDot;
			            ISymbol symbol=simpleLineSymbol as ISymbol;
			            symbol.ROP2 = esriRasterOpCode.esriROPNotXOrPen;
        
			3.FillSymbol 对象
				修饰具有面积的几何形体的符号对象
				IFillSymbol
					Color：填充符号的基本类型
					OutLine：外边框
				1.SimpleFillSymbol：简单填充符号
					ISimpleFillSymbol
						Color
						Style:
						    public enum esriSimpleFillStyle
						    {
						        esriSFSSolid = 0,
						        esriSFSNull = 1,
						        esriSFSHollow = 1,
						        esriSFSHorizontal = 2,
						        esriSFSVertical = 3,
						        esriSFSForwardDiagonal = 4,
						        esriSFSBackwardDiagonal = 5,
						        esriSFSCross = 6,
						        esriSFSDiagonalCross = 7,
					        }
				2.LineFillSymbol：线填充符号
				3.MarkerFillSymbol：点填充符号
				4.GradientFillSymbol：渐变颜色
				5.PictureFillSymbol：图片填充符号
				6.MultilayerFillSymbol：多层填充符号
				7.DotDensityFillSymbol：点密度填充符号
			4.TextSymbol 对象
			5.3DChartSymbol 对象
				子类：BarChart、PieChart、StackedChart
	3.专题图制作
6.空间数据管理
	1.SDE
	2.空间数据库及组织
		1.混合型空间数据库
			非空间数据存储在关系型数据库中，空间数据存放在系统文件中
		2.集成型空间数据库
			所有的数据都存储于一个数据库中
			1.全关系型 RDB
			2.面向对象 OODB
			3.对象-关系模型数据库 ORDB
	3.空间数据模型
	4.Geodatabase 体系系统
		1.对象类(Object Class)：非空间实体，没有存储空间信息
		2.要素类(Feature Class)：具有相同几何形状的空间实体：点状要素类、线状要素类、面状要素类
		3.要素数据集(Feature Datasets)：由一组相同空间参考(spatial reference)的要素类组成
		4.栅格数据集(Raster Datasets)
		5.TIN数据集(Tin Datasets)：由一系列不规则的三角形构成
		6.关系类(Relationship Class)
		7.属性域(Domain):定义属性的有效取值范围
		8.几何网络(Geometric Network)
	5.Geodatabase 对象模型
		主要类：
			1.工作区域部分
			2.数据集部分
				1.WorkspaceFactory 类
					用于连接 SDE
					PropertySet
				2.Workspace 类
					存放空间和非空间数据，FeatureDatasets、RasterDatasets、Tables
				3.FeatureDataset 组件类
					IFeatureDataset
						CreateFeatureClass
	6.Geodatabase 使用与开发
7.数据编辑
	3.要素编辑
		1.开始编辑
			IWorkspaceEdit：启动或停止一个编辑流程
				StartEditing(bool withUndoRedo)：withUndoRedo 是否开启撤销
					StartEditOperation：开始编辑操作(一个更改动作)
		2.结束编辑
			StopEditOperation()：用来确保编辑操作的完成
			UndoEditOperation():用于处于编辑状态的回滚操作
			StopEditing()：完成编辑，所有操作不能再回滚
			工作流程：
				// 1.启动一个工作空间工厂
	            	IWorkspaceFactory workspaceFactory = new AccessWorkspaceFactoryClass();
	            // 2.用工作空间工厂打开数据库、SDE数据库、SHP文件的路径
	            // 返回的是工作空间(IWorkspace)的继承接口(IFeatureWorkspace)的实例，也继承了 IWorkspaceEdit
	            	IFeatureWorkspace featureWorkspace = workspaceFactory.OpenFromFile(@"C:\xxx\test.mdb", 0) as IFeatureWorkspace;
	            // 3.用返回的工作空间打开指定 名称 的 SHP 文件、图层
	            	IFeatureClass featureClass = featureWorkspace.OpenFeatureClass("line");
	            	IWorkspaceEdit workspaceEdit = featureWorkspace as IWorkspaceEdit;
	            // 4.开启编辑
	            	workspaceEdit.StartEditing(true);
	            // 编辑动作
	            	workspaceEdit.StartEditOperation();
                // 5.根据 ID 获取要素，并删除
                	IFeature feature = featureClass.GetFeature(1);
                	feature.Delete();
	            // 6.完成编辑
	            	workspaceEdit.StopEditOperation();
                // 7.结束编辑，保存编辑结果
                	workspaceEdit.StopEditing(true);
                // 8.结束编辑，不保存编辑结果
                	workspaceEdit.StopEditing(false);
		3.图形编辑
			用到的接口：IFeature、IFeatureEdit、IWorkspaceEdit、IFeatureClass、IFeatureCursor
8.栅格数据
	2.访问和创建栅格数据
		Copy：复制一个工作空间中所有的栅格数据到另一工作空间
		OpenRasterDataset：打开一个栅格数据集
		CreateRasterDataset：用于产生一个新的基于文件的栅格数据集对象
		e.g
			IWorkspaceFactory workspaceFactory=new RasterWorkspaceFactoryClass();
            string path = @"C:\xxx\test";
            IRasterWorkspace2 rasterWorkspace = workspaceFactory.OpenFromFile(path, 0) as IRasterWorkspace2;
            string file = @"\test.bmp";
            IRasterDataset rasterDataset = rasterWorkspace.OpenRasterDataset(file);
            IRasterLayer rasterLayer = new RasterLayerClass();
            rasterLayer.CreateFromDataset(rasterDataset);
            axMapControl1.Map.AddLayer(rasterLayer as ILayer);
            axMapControl1.Extent = axMapControl1.FullExtent;
    4.栅格数据转换
    	GeoAnalyst 类库 IConversionOp 接口，提供5个转换方法
    	1.栅格数据转矢量数据：RasterDataToLineFeatureData、RasterDataToPointFeatureData、RasterDataToPolygonFeatureData、ToFeatureData
    		用于提取矢量要素的栅格对象：Raster、RasterDataset、RasterBand、RasterDescriptor
    		用于栅格化的矢量要素有 FeatureClass、FeatureClassDescriptor、FeatureLayer
    		接口实现类：RasterConversionOpClass
    	2.矢量数据转栅格数据：ToRasterDataset
    		rasterFormat:
    			GRID
            	IMAGINE Image
            	TIFF
10.空间分析
	2.空间查询
		游标3种：查询游标（Search）、插入游标（Insert）、更新游标（Update），查询和更新都需要过滤器对象（IQueryFilter）
		ICursor 接口：定义了一个 ROW 集合或 row 对象的属性和方法
		1.基于属性查询
			查询语句：
				LIKE 模糊查询
				IN 匹配多个内容：“name in('name1','name2','name3')”
			QueryFilter：查询过滤器
				IQueryFilter
					AddField(string subField)：向输出字段集中增加一个字段
					SubFields：获取/设置 字段名称清单
					WhereClause：获取/设置 查询过滤条件
						1.区分大小写
						2.不支持 OrderBy，使用 ITableSort
							ITableSort
								Fields：[必]用于排序的字段列表
								Table:[必]
								Sort():查询并排序
								Ascending：用于确定升序字段
								CaseSensitive：大小写
								set_CaseSensitive(string Field, bool A_2)：设置字段大小写是否忽略
								ICursor Rows { get; }
			e.g
				方法一、
					#region IFeatureCursor
		            IFeatureCursor featureCursor;
		            IFeature feature = null;
		            try
		            {
		                featureCursor = featureClass.Search(queryFilter, true);
		                feature = featureCursor.NextFeature();
		                while (feature != null)
		                {
		                    axMapControl1.Map.SelectFeature(featureLayer, feature);
		                    feature = featureCursor.NextFeature();
		                }
		            }
		            catch (Exception){}
		            #endregion
				方法二、
		            #region ITableSort
		            ITableSort tableSort = new TableSortClass();
		            tableSort.Fields = comboBox2.SelectedItem.ToString();
		            tableSort.Table = featureClass as ITable;
		            tableSort.QueryFilter = queryFilter;
		            tableSort.set_CaseSensitive(comboBox2.SelectedItem.ToString(), false);
		            tableSort.Sort(null);
		            ICursor cursor = tableSort.Rows;
		            IRow row = cursor.NextRow();
		            while (row != null)
		            {
		                axMapControl1.Map.SelectFeature(featureLayer, row as IFeature);
		                row = cursor.NextRow();
		            }
		            #endregion
		2.基于空间位置查询
			根据要素与要素之间的空间关系进行查询：
				相交（Intersect）、相接（Touch）、叠加（Overlap）、穿越（Crosses）、在内部（Within）、包含（Contains）
			SpatialFilter 组件类，QueryFilter 的子类
			ISpatialFilter 接口：QueryFilter 实现
				1方法+10属性：
					Geometry：[必]获取/设置 查询的几何图形，用此几何图形来限制空间位置（查询的范围）
					GeometryField：[必]获取/设置 被查询字段
					SpatialRef：[必]获取/设置 查询时的空间关系：
						esriSpatialRelEnum 
							esriSpatialRelUndefined：未定义
							esriSpatialRelIntersects：相交
							esriSpatialRelEnvelopeIntersects：包络线相交
							esriSpatialRelIndexIntersects：索引相交
							esriSpatialRelTouches：相接，边界处相接
							esriSpatialRelOverlaps：叠加，同维度，如：同是多边形
							esriSpatialRelCrosses：相交：线与线相交于一点，线与面相交于一条线
							esriSpatialRelWithin：A在B内部
							esriSpatialRelContains：A被B包含
							esriSpatialRelRelation：Query geometry IBE(Interior-Boundary-Exterior) relationship with target geometry.
					SearchOrder：获取/设置 查询顺序
					AddField(string subField)：向输出字段集中增加一个字段
		3.要素选择集 SelectionSet
			ISelectionSet
	3.空间几何图形的集合运算
		集合运算
			点与多边形集合运算：多边形对点的包含关系分析
			线与多边形集合运算：比较线上坐标与多边形坐标的关系，判断线是否落入多边形内的分析
			多边形与多边形集合运算：将两个或者多个多边形进行叠加产生一个新多边形的操作
		集合运算操作
			叠置求交 Interset
			叠置求和 Union
	4.空间拓扑运算
		ITopologicalOperator 接口:实现类：Point、Multipoint、Polyline、Polygon、Multipatch
			Boundary：获取几何图形的边界
				IGeometry Boundary { get; }
			Buffer：用于集合对象缓冲区拓扑操作
				IGeometry Buffer(double distance);
				/*
		         * 1.获取要素作为拓扑对象
		         * 2.设置缓冲区距离 ConvertPixelsToMapUnits
		         * 3.获取缓冲区 Buffer
		         * 4.使用缓冲区做空间位置查询
		         * 5.高亮查询结果
		         */
			Clip：用于对几何对象进行裁剪空间拓扑操作
				void QueryClipped(IEnvelope clipperEnvelope, IGeometry clippedGeometry);
				/*
		         * 1.获取要素作为拓扑对象
		         * 2.获取包络线的大小的1/3作为裁剪的范围
		         * 3.新建几何图形作为裁剪结果的容器
		         * 4.裁剪 QueryClipped
		         * 5.图形显示裁剪结果
		         */
			ConstructUnion：将多个枚举对象与单个几何对象合并为单个几何对象
				void ConstructUnion(IEnumGeometry geometries);
				/*
		         * 1.新建几何对象要素集 GeometryBagClass g
		         * 2.g 收集图层一个或多个要素几何对象 Shape
		         * 3.新建一个多边形类作为拓扑对象 p
		         * 4.拓扑.合并几何对象集 ConstructUnion
		         * 5.填充图形显示合并结果 p
		         */
			ConvexHull：用于构建几何对象的凸多边形，即包含几何对象的最小外多边形
				IGeometry ConvexHull();
				/*
		         * 1.获取图层某个要素几何图形作为拓扑对象
		         * 2.获取凸多边形 ConvexHull
		         * 3.线图形显示
		         */
			Cut：切割几何对象,左右切割
				void Cut(IPolyline cutter, out IGeometry leftGeom, out IGeometry rightGeom);
				/*
		         * 1.获取图层某个要素几何图形作为拓扑对象
		         * 2.获取包络线取左下角+右上角，画对角线
		         * 3.新建左右几何对象 IGeometry，用来接收切割后的图形
		         * 4.使用对角线切割图形 Cut
		         * 5.填充图形显示切割结果
		         */
	        Difference：相减 A-B
	        	IGeometry Difference(IGeometry other);
	        	/*
		         * 1.获取要素A、B
		         * 2.C=A-B Difference
		         * 3.填充显示
		         */
			Intersection：交集部分
				IGeometry Intersect(IGeometry other, esriGeometryDimension resultDimension);
				/*
		         * 1.获取要素A、B
		         * 2.C=A交B Intersect
		         * 3.填充显示
		         */
			Simplify：使拓扑一致
				void Simplify();
			SymmetricDifference：对称差分，合并后再减去交集部分
				IGeometry SymmetricDifference(IGeometry other);
			Union：合并对象
				IGeometry Union(IGeometry other);
	5.空间关系运算
		1.IRelationalOperator 接口
			用来获取几何对象之间的空间关系：
				Contain：A是否包含B
				Cross：相交
				Equal：相等
				Touch：是否连接
				Disjoin：是否不相交
				Overlap：是否有重叠
				Relation：Relationship
				Within：A是否被B包含
		2.IProximityOperator 接口
			1.用于获取两个图形的距离
			2.提供一个点，获取另一个图形上距离定点最近的点
	6.网络及网络分析
其他
	许可
		ESRI.ArcGIS.RuntimeManager.Bind(ESRI.ArcGIS.ProductCode.EngineOrDesktop);
        ESRI.ArcGIS.RuntimeManager.BindLicense(ESRI.ArcGIS.ProductCode.Engine);
        // SDE
        IAoInitialize ao = new AoInitializeClass();
        ao.Initialize(esriLicenseProductCode.esriLicenseProductCodeEngineGeoDB);
    pos
        SetDesktopLocation(System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Size.Width/2, System.Windows.Forms.Screen.PrimaryScreen.WorkingArea.Size.Height - 300);
